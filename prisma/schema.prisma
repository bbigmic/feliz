generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int      @id @default(autoincrement())
  email             String   @unique
  passwordHash      String
  createdAt         DateTime @default(now())
  termsAccepted     Boolean  @default(false)
  marketingAccepted Boolean  @default(false)
  isAdmin           Boolean  @default(false)
  role              String   @default("user") // user, admin, seller, management
  profileImageUrl   String?  // URL zdjęcia profilowego
  bio               String?  // Opis/bio sprzedawcy
  firstName         String?  // Imię
  lastName          String?  // Nazwisko
  level             Int      @default(1) // Poziom sprzedawcy
  referrerId        Int?     // ID sprzedawcy, który zaprosił tego użytkownika
  referrer          User?    @relation("UserReferrals", fields: [referrerId], references: [id])
  referrals         User[]   @relation("UserReferrals") // Użytkownicy zaproszeni przez tego sprzedawcę
  orders            Order[]  @relation("UserOrders")
  sellerOrders      Order[]  @relation("SellerOrders")
  leads             Lead[]
}

model Order {
  id                  Int      @id @default(autoincrement())
  userId              Int?
  productId           Int?
  email               String?
  phone               String
  info                String?
  orderType           String   @default("collaboration") // collaboration, code, consultation, custom_payment
  status              String   @default("pending")
  createdAt           DateTime @default(now())
  stripeSessionId     String?
  termsAccepted       Boolean  @default(false)
  marketingAccepted   Boolean  @default(false)
  collaborationConsentAccepted Boolean  @default(false) // Nowe pole dla zgody na współpracę
  codeConsentAccepted Boolean  @default(false) // Nowe pole dla zgody na kod
  selectedCategory    String?
  language            String   @default("pl")
  user                User?    @relation("UserOrders", fields: [userId], references: [id])
  files               OrderFile[]
  sellerId            Int?    // Id sprzedawcy
  seller              User?    @relation("SellerOrders", fields: [sellerId], references: [id])
  commissionRate      Float?   // Procent prowizji w momencie opłacenia (np. 0.10 dla 10%)
  referrerCommission  Float?   // Prowizja dla referrera sprzedawcy (5-10% z obrotu, zależy od poziomu sieci)
  customAmount        Float?   // Kwota dla niestandardowych płatności (custom_payment)
}

model OrderFile {
  id        Int      @id @default(autoincrement())
  filename  String
  originalName String
  mimeType  String
  size      Int
  url       String
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  createdAt DateTime @default(now())
}

model Software {
  id            Int             @id @default(autoincrement())
  name          String
  description   String
  price         Int
  categories    String          @default("[]")
  categoriesEn  String?
  demoUrl       String
  features      String
  rating        Float
  sales         Int
  status        String          @default("active")
  createdAt     DateTime        @default(now())
  descriptionEn String?
  featuresEn    String?
  nameEn        String?
  images        SoftwareImage[]
  leads         Lead[]          // Relacja do leadów używających tego szablonu
  testimonials  Testimonial[]   // Relacja do opinii
}

model SoftwareImage {
  id          Int      @id @default(autoincrement())
  url         String
  isThumbnail Boolean  @default(false)
  softwareId  Int
  software    Software @relation(fields: [softwareId], references: [id])
}

model Component {
  id        Int     @id @default(autoincrement())
  name      String
  priceFrom Int
  priceTo   Int
  notes     String
  nameEn    String?
  notesEn   String?
}

model Lead {
  id                  Int      @id @default(autoincrement())
  sellerId            Int      // Id sprzedawcy
  email               String?  @unique
  phone               String?
  info                String?
  status              String   @default("pending")
  createdAt           DateTime @default(now())
  seller              User     @relation(fields: [sellerId], references: [id])
  selectedCategory    String?
  softwareTemplateId  Int?     // Id wybranego szablonu oprogramowania
  softwareTemplate    Software? @relation(fields: [softwareTemplateId], references: [id])
}

model Testimonial {
  id          Int      @id @default(autoincrement())
  softwareId  Int
  software    Software @relation(fields: [softwareId], references: [id])
  name        String   // Imię osoby dodającej opinię
  position    String?  // Stanowisko (opcjonalnie)
  positionEn  String?  // Stanowisko po angielsku (automatycznie tłumaczony)
  email       String?  // Email (opcjonalnie)
  rating      Int      // 1-5 gwiazdek
  comment     String   // Komentarz po polsku
  commentEn   String?  // Komentarz po angielsku (automatycznie tłumaczony)
  isApproved  Boolean  @default(false) // Moderacja opinii
  createdAt   DateTime @default(now())
}
