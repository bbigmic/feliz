generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int      @id @default(autoincrement())
  email             String   @unique
  passwordHash      String
  createdAt         DateTime @default(now())
  termsAccepted     Boolean  @default(false)
  marketingAccepted Boolean  @default(false)
  isAdmin           Boolean  @default(false)
  role              String   @default("user") // user, admin, seller, management
  profileImageUrl   String?  // URL zdjęcia profilowego
  bio               String?  // Opis/bio sprzedawcy
  firstName         String?  // Imię
  lastName          String?  // Nazwisko
  level             Int      @default(1) // Poziom sprzedawcy
  orders            Order[]
  leads              Lead[]
}

model Order {
  id                  Int      @id @default(autoincrement())
  userId              Int?
  productId           Int?
  email               String?
  phone               String
  info                String?
  orderType           String   @default("collaboration") // collaboration, code, consultation
  status              String   @default("pending")
  createdAt           DateTime @default(now())
  stripeSessionId     String?
  termsAccepted       Boolean  @default(false)
  marketingAccepted   Boolean  @default(false)
  collaborationConsentAccepted Boolean  @default(false) // Nowe pole dla zgody na współpracę
  codeConsentAccepted Boolean  @default(false) // Nowe pole dla zgody na kod
  selectedCategory    String?
  language            String   @default("pl")
  user                User?    @relation(fields: [userId], references: [id])
  files               OrderFile[]
  sellerId            Int?    // Id sprzedawcy
  commissionRate      Float?   // Procent prowizji w momencie opłacenia (np. 0.10 dla 10%)
}

model OrderFile {
  id        Int      @id @default(autoincrement())
  filename  String
  originalName String
  mimeType  String
  size      Int
  url       String
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  createdAt DateTime @default(now())
}

model Software {
  id            Int             @id @default(autoincrement())
  name          String
  description   String
  price         Int
  categories    String          @default("[]")
  categoriesEn  String?
  demoUrl       String
  features      String
  rating        Float
  sales         Int
  status        String          @default("active")
  createdAt     DateTime        @default(now())
  descriptionEn String?
  featuresEn    String?
  nameEn        String?
  images        SoftwareImage[]
  leads         Lead[]          // Relacja do leadów używających tego szablonu
}

model SoftwareImage {
  id          Int      @id @default(autoincrement())
  url         String
  isThumbnail Boolean  @default(false)
  softwareId  Int
  software    Software @relation(fields: [softwareId], references: [id])
}

model Component {
  id        Int     @id @default(autoincrement())
  name      String
  priceFrom Int
  priceTo   Int
  notes     String
  nameEn    String?
  notesEn   String?
}

model Lead {
  id                  Int      @id @default(autoincrement())
  sellerId            Int      // Id sprzedawcy
  email               String?
  phone               String?
  info                String?
  status              String   @default("pending")
  createdAt           DateTime @default(now())
  seller              User     @relation(fields: [sellerId], references: [id])
  selectedCategory    String?
  softwareTemplateId  Int?     // Id wybranego szablonu oprogramowania
  softwareTemplate    Software? @relation(fields: [softwareTemplateId], references: [id])
}
