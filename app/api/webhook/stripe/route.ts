import { NextRequest, NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'
import Stripe from 'stripe'

const prisma = new PrismaClient()
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, { apiVersion: '2023-10-16' })

export async function POST(request: NextRequest) {
  console.log('üîî Webhook Stripe otrzymany')
  
  // Sprawd≈∫ czy STRIPE_WEBHOOK_SECRET jest skonfigurowany
  if (!process.env.STRIPE_WEBHOOK_SECRET) {
    console.error('‚ùå STRIPE_WEBHOOK_SECRET nie jest skonfigurowany')
    return NextResponse.json({ error: 'Webhook secret nie jest skonfigurowany' }, { status: 500 })
  }

  const body = await request.text()
  const signature = request.headers.get('stripe-signature')

  if (!signature) {
    console.error('‚ùå Brak podpisu Stripe')
    return NextResponse.json({ error: 'Brak podpisu' }, { status: 400 })
  }

  let event: Stripe.Event

  try {
    event = stripe.webhooks.constructEvent(body, signature, process.env.STRIPE_WEBHOOK_SECRET)
    console.log(`‚úÖ Podpis zweryfikowany, typ eventu: ${event.type}`)
  } catch (err) {
    console.error('‚ùå B≈ÇƒÖd weryfikacji podpisu:', err)
    return NextResponse.json({ error: 'Nieprawid≈Çowy podpis' }, { status: 400 })
  }

  try {
    switch (event.type) {
      case 'checkout.session.completed':
        const session = event.data.object as Stripe.Checkout.Session
        const orderId = session.metadata?.orderId
        const productId = session.metadata?.productId
        const orderType = session.metadata?.orderType

        console.log(`üí∞ P≈Çatno≈õƒá zako≈Ñczona dla zam√≥wienia: ${orderId}`)
        console.log(`üì¶ ProductId: ${productId}, OrderType: ${orderType}`)

        if (orderId) {
          // Sprawd≈∫ czy zam√≥wienie istnieje
          const existingOrder = await prisma.order.findUnique({
            where: { id: parseInt(orderId) }
          })

          if (!existingOrder) {
            console.error(`‚ùå Zam√≥wienie ${orderId} nie istnieje w bazie danych`)
            return NextResponse.json({ error: 'Zam√≥wienie nie istnieje' }, { status: 404 })
          }

          if (existingOrder.status === 'paid') {
            console.log(`‚ÑπÔ∏è Zam√≥wienie ${orderId} ju≈º zosta≈Ço op≈Çacone`)
            return NextResponse.json({ received: true, message: 'Zam√≥wienie ju≈º op≈Çacone' })
          }

          // Aktualizuj status zam√≥wienia
          await prisma.order.update({
            where: { id: parseInt(orderId) },
            data: { status: 'paid' }
          })
          console.log(`‚úÖ Zam√≥wienie ${orderId} zosta≈Ço oznaczone jako op≈Çacone`)
          
          // Je≈õli to demo i mamy productId, zwiƒôksz licznik sprzeda≈ºy
          if (orderType === 'demo' && productId) {
            try {
              await prisma.software.update({
                where: { id: parseInt(productId) },
                data: {
                  sales: {
                    increment: 1
                  }
                }
              })
              console.log(`üìà Zwiƒôkszono licznik sprzeda≈ºy dla oprogramowania ${productId}`)
            } catch (err) {
              console.error('‚ùå B≈ÇƒÖd podczas zwiƒôkszania licznika sprzeda≈ºy:', err)
            }
          }
        } else {
          console.error('‚ùå Brak orderId w metadata sesji')
        }
        break

      case 'checkout.session.expired':
        const expiredSession = event.data.object as Stripe.Checkout.Session
        const expiredOrderId = expiredSession.metadata?.orderId

        console.log(`‚è∞ Sesja wygas≈Ça dla zam√≥wienia: ${expiredOrderId}`)

        if (expiredOrderId) {
          await prisma.order.update({
            where: { id: parseInt(expiredOrderId) },
            data: { status: 'expired' }
          })
          console.log(`‚úÖ Zam√≥wienie ${expiredOrderId} oznaczone jako wygas≈Çe`)
        }
        break

      default:
        console.log(`‚ÑπÔ∏è Nieobs≈Çugiwany typ eventu: ${event.type}`)
    }

    return NextResponse.json({ received: true })
  } catch (err) {
    console.error('‚ùå B≈ÇƒÖd podczas przetwarzania webhook:', err)
    return NextResponse.json({ error: 'B≈ÇƒÖd serwera' }, { status: 500 })
  } finally {
    await prisma.$disconnect()
  }
} 